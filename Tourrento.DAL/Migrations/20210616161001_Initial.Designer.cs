// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tourrento.DAL;

namespace Tourrento.DAL.Migrations
{
    [DbContext(typeof(TourrentoDbContext))]
    [Migration("20210616161001_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "FELHASZNALÓ",
                            ConcurrencyStamp = "092a0244-66ff-428e-809c-7b0a479767f8",
                            Name = "Felhasznaló",
                            NormalizedName = "FELHASZNALÓ"
                        },
                        new
                        {
                            Id = "SZERVEZŐ",
                            ConcurrencyStamp = "7cdcf613-5a08-428a-b3db-b95a7b18169d",
                            Name = "Szervező",
                            NormalizedName = "SZERVEZŐ"
                        },
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "66910755-f69f-45a6-8a8f-d3064d316406",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            RoleId = "Admin"
                        },
                        new
                        {
                            UserId = "seedone",
                            RoleId = "Szervező"
                        },
                        new
                        {
                            UserId = "seedtwo",
                            RoleId = "Felhasznaló"
                        },
                        new
                        {
                            UserId = "seedthree",
                            RoleId = "Felhasznaló"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Védőfelszerelés"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mászófelszerelés"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ejtőernyő"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Búvárruha",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Túrafelszerelés"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sétabot",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bicikli"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Görkorcsolya"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Egyéb felszerelés"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Tandem",
                            ParentCategoryId = 7
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("FeePerDay")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ez a kétszemélyes bicikli megfelelő a túrázáshoz. Könnyen tekerhető és írányítható, ami nagyszerű élményt biztosít.",
                            FeePerDay = 5000,
                            ImageName = "item1.jpg",
                            InStock = 4,
                            Name = "Xemrot Tandem bicikli v2.0",
                            Price = 3000
                        },
                        new
                        {
                            Id = 2,
                            Description = "Óvja biztonságát biciklizés vagy görkorcsolyázás közben! Brit tudósok által tesztelt, teljes védelmet biztosít esés esetén.",
                            FeePerDay = 1500,
                            ImageName = "item2.jpg",
                            InStock = 27,
                            Name = "GroundedZero bukósisak - felnőtt",
                            Price = 990
                        },
                        new
                        {
                            Id = 3,
                            Description = "Válaszd a legnagyobb biztonságú és hatékonyságú ejtőernyőt. Dupla öltésű varratok ragasztott menettel. Megerősítés a kulcsfontosságú területeken az extra tartósság érdekében.",
                            FeePerDay = 3500,
                            ImageName = "item3.jpg",
                            InStock = 20,
                            Name = "Skydiver x20 ejtőernyő",
                            Price = 1990
                        },
                        new
                        {
                            Id = 4,
                            Description = "A 250W extra teljesítménnyel az elektromos rásegítés kiegészíti a pedálozást, hogy megküzdj az akadályokkal. Tovább élvezheted a hegyi kerékpározást. A motor leáll, amint abbahagyod a pedálozást.",
                            FeePerDay = 4000,
                            ImageName = "item4.jpg",
                            InStock = 3,
                            Name = "Neuzer Nelson 18 Férfi Mountain Bike bicikli",
                            Price = 1590
                        },
                        new
                        {
                            Id = 5,
                            Description = "A Offroad XC Trainer 150 Görkorcsolya a legjobb választásnak bizonyul azok számára, akik nem ragaszkodnak a járdák által megszabott útvonalakhoz. Az alumínium váz rendkívül könnyű és jó irányíthatóságot ad.",
                            FeePerDay = 3250,
                            ImageName = "item5.jpg",
                            InStock = 24,
                            Name = "Powerslide Offroad XC Trainer 150 Terep Görkorcsolya",
                            Price = 1490
                        },
                        new
                        {
                            Id = 6,
                            Description = "A sétabot kiváló minőségű alumíniumból készült. Egyszerűen elfogható, és a végén csúszásgátló járóbot gumi van, amely biztonságos és zajmentes használatot tesz lehetővé.",
                            FeePerDay = 1550,
                            ImageName = "item6.jpg",
                            InStock = 28,
                            Name = "Fa fogantyús sétabot - fekete",
                            Price = 990
                        },
                        new
                        {
                            Id = 7,
                            Description = "3 m hosszú, 12 mm átmérőjű, körszövött, statikus poliamid kötél • félautomata hossz-szabályzó egység • mechanikai sérülések elleni védőtömlő • egy csavarmenetes, egy rugós karabiner • EU szabvány: EN358.",
                            FeePerDay = 1450,
                            ImageName = "item7.jpg",
                            InStock = 41,
                            Name = "Kötél karabinerrel",
                            Price = 990
                        },
                        new
                        {
                            Id = 8,
                            Description = "Akár sátorozni mész a természetbe, vagy akár csak fel akarsz \"fegyverkezni\" a hétköznapokban előforduló vészhelyzetekre, ez a kompakt Túlélőfelszerelés garantáltan megfelelő társad lesz. Ebben a könyvméretű csomagban összpontosul a 8 legfontosabb eszköz, amire szükséged lehet egy - egy kaland során.Méretéből adódóan pedig akkora, hogy simán elfér a hátizsákodban vagy az autó kesztyűtartójában.",
                            FeePerDay = 4500,
                            ImageName = "item8.jpg",
                            InStock = 11,
                            Name = "Túlélő felszerelés készlet",
                            Price = 2390
                        },
                        new
                        {
                            Id = 9,
                            Description = "Széles gumiabroncsok - amortizációként szolgálhatnak, ami azt jelenti, hogy a legtöbb akadály gyakorlatilag észrevehetetlen. A tárcsára gyakorolt ​​erő sokkal nagyobb, ami csökkenti a féktávolságot.",
                            FeePerDay = 6400,
                            ImageName = "item9.jpg",
                            InStock = 17,
                            Name = "Blank 2021 Tyro 20 Inch Bike Steel Grey",
                            Price = 3690
                        },
                        new
                        {
                            Id = 10,
                            Description = "A hideg vízben a nedvesruha extra melegen tarthatja a testet. A búvárruhák működési elve az, hogy amikor a víz belép a ruhákba, majd egy vékony vizes réteget hagy a testen. akkor a test folyamatosan mozog, hogy hőt termeljen, melegedjen és melegen tartsa a testet.",
                            FeePerDay = 10000,
                            ImageName = "item10.jpg",
                            InStock = 7,
                            Name = "ZCCO Férfi Szörfoverall - XL",
                            Price = 5990
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.ItemCart", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemCarts");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            UserId = "seedtwo",
                            Quantity = 2
                        },
                        new
                        {
                            ItemId = 5,
                            UserId = "seedtwo",
                            Quantity = 1
                        },
                        new
                        {
                            ItemId = 3,
                            UserId = "seedtwo",
                            Quantity = 2
                        },
                        new
                        {
                            ItemId = 8,
                            UserId = "seedtwo",
                            Quantity = 3
                        },
                        new
                        {
                            ItemId = 2,
                            UserId = "seedthree",
                            Quantity = 3
                        },
                        new
                        {
                            ItemId = 10,
                            UserId = "seedthree",
                            Quantity = 2
                        },
                        new
                        {
                            ItemId = 9,
                            UserId = "seedthree",
                            Quantity = 2
                        },
                        new
                        {
                            ItemId = 6,
                            UserId = "seedthree",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.ItemCategory", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            CategoryId = 10
                        },
                        new
                        {
                            ItemId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ItemId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            ItemId = 4,
                            CategoryId = 7
                        },
                        new
                        {
                            ItemId = 5,
                            CategoryId = 8
                        },
                        new
                        {
                            ItemId = 6,
                            CategoryId = 5
                        },
                        new
                        {
                            ItemId = 6,
                            CategoryId = 6
                        },
                        new
                        {
                            ItemId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            ItemId = 7,
                            CategoryId = 5
                        },
                        new
                        {
                            ItemId = 8,
                            CategoryId = 5
                        },
                        new
                        {
                            ItemId = 8,
                            CategoryId = 9
                        },
                        new
                        {
                            ItemId = 9,
                            CategoryId = 7
                        },
                        new
                        {
                            ItemId = 10,
                            CategoryId = 1
                        },
                        new
                        {
                            ItemId = 10,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.ParticipateTour", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("TourId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ParticipateTours");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            UserId = "seedtwo",
                            IsPaid = false,
                            Price = 1500
                        },
                        new
                        {
                            TourId = 2,
                            UserId = "seedthree",
                            IsPaid = true,
                            Price = 1700
                        },
                        new
                        {
                            TourId = 3,
                            UserId = "seedtwo",
                            IsPaid = true,
                            Price = 1200
                        },
                        new
                        {
                            TourId = 4,
                            UserId = "seedthree",
                            IsPaid = false,
                            Price = 1800
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.RentedItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "RentId");

                    b.HasIndex("RentId");

                    b.ToTable("RentedItems");

                    b.HasData(
                        new
                        {
                            ItemId = 2,
                            RentId = 1,
                            Price = 3000,
                            Quantity = 2
                        },
                        new
                        {
                            ItemId = 4,
                            RentId = 2,
                            Price = 4500,
                            Quantity = 2
                        },
                        new
                        {
                            ItemId = 6,
                            RentId = 3,
                            Price = 3500,
                            Quantity = 2
                        },
                        new
                        {
                            ItemId = 9,
                            RentId = 3,
                            Price = 2400,
                            Quantity = 1
                        },
                        new
                        {
                            ItemId = 7,
                            RentId = 4,
                            Price = 2000,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.RequiredCategoryTour", b =>
                {
                    b.Property<int>("RequiredCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("RequiredCategoryId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("RequiredCategoryTours");

                    b.HasData(
                        new
                        {
                            RequiredCategoryId = 1,
                            TourId = 1
                        },
                        new
                        {
                            RequiredCategoryId = 2,
                            TourId = 1
                        },
                        new
                        {
                            RequiredCategoryId = 5,
                            TourId = 1
                        },
                        new
                        {
                            RequiredCategoryId = 1,
                            TourId = 2
                        },
                        new
                        {
                            RequiredCategoryId = 2,
                            TourId = 2
                        },
                        new
                        {
                            RequiredCategoryId = 5,
                            TourId = 2
                        },
                        new
                        {
                            RequiredCategoryId = 1,
                            TourId = 3
                        },
                        new
                        {
                            RequiredCategoryId = 2,
                            TourId = 3
                        },
                        new
                        {
                            RequiredCategoryId = 5,
                            TourId = 3
                        },
                        new
                        {
                            RequiredCategoryId = 5,
                            TourId = 4
                        },
                        new
                        {
                            RequiredCategoryId = 7,
                            TourId = 4
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.TourService", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TourServices");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            TourId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            TourId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            TourId = 2,
                            ServiceId = 2
                        },
                        new
                        {
                            TourId = 3,
                            ServiceId = 1
                        },
                        new
                        {
                            TourId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            TourId = 3,
                            ServiceId = 3
                        },
                        new
                        {
                            TourId = 3,
                            ServiceId = 4
                        },
                        new
                        {
                            TourId = 3,
                            ServiceId = 5
                        },
                        new
                        {
                            TourId = 4,
                            ServiceId = 1
                        },
                        new
                        {
                            TourId = 4,
                            ServiceId = 2
                        },
                        new
                        {
                            TourId = 4,
                            ServiceId = 4
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("QuestionerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionerId");

                    b.HasIndex("TourId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Question = "Hány megálló lesz, ahol pihenni lehet?",
                            QuestionerId = "seedtwo",
                            TourId = 1
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Nem, az ételről mindenki maga gondoskodik, de megfogunk állni a boltoknál ha szükséges.",
                            Question = "Az étkezés benne van az árban?",
                            QuestionerId = "seedthree",
                            TourId = 2
                        },
                        new
                        {
                            Id = 3,
                            Question = "Hány megálló lesz, ahol pihenni lehet?",
                            QuestionerId = "seedtwo",
                            TourId = 3
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Nem, az ételről mindenki maga gondoskodik, de megfogunk állni a boltoknál ha szükséges.",
                            Question = "Az étkezés benne van az árban?",
                            QuestionerId = "seedthree",
                            TourId = 4
                        },
                        new
                        {
                            Id = 5,
                            Answer = "Igen, így aki szeretne az vásárolhat magának frissítőket vagy ennivalót.",
                            Question = "Fogunk megállni bolt közelébe?",
                            QuestionerId = "seedthree",
                            TourId = 1
                        },
                        new
                        {
                            Id = 6,
                            Question = "Gyerekek is résztvehetnek az eseményen? A fiam szívesen jönne",
                            QuestionerId = "seedtwo",
                            TourId = 2
                        },
                        new
                        {
                            Id = 7,
                            Answer = "Igen, így aki szeretne az vásárolhat magának frissítőket vagy ennivalót.",
                            Question = "Fogunk megállni bolt közelébe?",
                            QuestionerId = "seedthree",
                            TourId = 3
                        },
                        new
                        {
                            Id = 8,
                            Question = "Gyerekek is résztvehetnek az eseményen? A fiam szívesen jönne",
                            QuestionerId = "seedtwo",
                            TourId = 4
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptContract")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("RentalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UntilDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptContract = true,
                            RentalDate = new DateTimeOffset(new DateTime(2021, 6, 16, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(9687), new TimeSpan(0, 2, 0, 0, 0)),
                            TotalPrice = 2000,
                            UntilDate = new DateTimeOffset(new DateTime(2021, 6, 17, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(9910), new TimeSpan(0, 2, 0, 0, 0)),
                            UserId = "seedtwo"
                        },
                        new
                        {
                            Id = 2,
                            AcceptContract = true,
                            RentalDate = new DateTimeOffset(new DateTime(2021, 6, 16, 18, 10, 0, 671, DateTimeKind.Unspecified).AddTicks(561), new TimeSpan(0, 2, 0, 0, 0)),
                            TotalPrice = 3000,
                            UntilDate = new DateTimeOffset(new DateTime(2021, 6, 17, 18, 10, 0, 671, DateTimeKind.Unspecified).AddTicks(571), new TimeSpan(0, 2, 0, 0, 0)),
                            UserId = "seedthree"
                        },
                        new
                        {
                            Id = 3,
                            AcceptContract = true,
                            RentalDate = new DateTimeOffset(new DateTime(2021, 6, 16, 18, 10, 0, 671, DateTimeKind.Unspecified).AddTicks(576), new TimeSpan(0, 2, 0, 0, 0)),
                            TotalPrice = 1000,
                            UntilDate = new DateTimeOffset(new DateTime(2021, 6, 17, 18, 10, 0, 671, DateTimeKind.Unspecified).AddTicks(579), new TimeSpan(0, 2, 0, 0, 0)),
                            UserId = "seedtwo"
                        },
                        new
                        {
                            Id = 4,
                            AcceptContract = true,
                            RentalDate = new DateTimeOffset(new DateTime(2021, 6, 16, 18, 10, 0, 671, DateTimeKind.Unspecified).AddTicks(582), new TimeSpan(0, 2, 0, 0, 0)),
                            TotalPrice = 5000,
                            UntilDate = new DateTimeOffset(new DateTime(2021, 6, 17, 18, 10, 0, 671, DateTimeKind.Unspecified).AddTicks(585), new TimeSpan(0, 2, 0, 0, 0)),
                            UserId = "seedthree"
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Idegenvezetés"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Étkezés biztosítása"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alvás lehetőség"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Orvosi ellátás"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Szükséges eszközök biztosítása"
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxNumberOfPeople")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = "seedone",
                            Description = "Gyere el velünk a legjobb János-hegyi túrára! Ajánlott védőfelszerelés, mert a túra során mászásra is sor kerülhet.",
                            EndDate = new DateTimeOffset(new DateTime(2021, 7, 8, 18, 10, 0, 669, DateTimeKind.Unspecified).AddTicks(8359), new TimeSpan(0, 2, 0, 0, 0)),
                            ImageName = "tour1.jpg",
                            MaxNumberOfPeople = 18,
                            Name = "János-hegyi túra",
                            Price = 2000,
                            StartDate = new DateTimeOffset(new DateTime(2021, 7, 7, 18, 10, 0, 668, DateTimeKind.Unspecified).AddTicks(2955), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = "seedone",
                            Description = "Gyere el velünk a legjobb Gellért-hegyi túrára! Ajánlott védőfelszerelés, mert a túra során mászásra is sor kerülhet.",
                            EndDate = new DateTimeOffset(new DateTime(2021, 7, 19, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(2222), new TimeSpan(0, 2, 0, 0, 0)),
                            ImageName = "tour2.jpg",
                            MaxNumberOfPeople = 30,
                            Name = "Gellért-hegyi túra",
                            Price = 1800,
                            StartDate = new DateTimeOffset(new DateTime(2021, 7, 19, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(2205), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = "seedone",
                            Description = "A több napos túra során rengeteg kalandban veszünk majd részt. Az étkezés és alvást a túra szervezői biztosítják.",
                            EndDate = new DateTimeOffset(new DateTime(2021, 8, 3, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(2368), new TimeSpan(0, 2, 0, 0, 0)),
                            ImageName = "tour3.jpg",
                            MaxNumberOfPeople = 32,
                            Name = "Több napos túra",
                            Price = 42800,
                            StartDate = new DateTimeOffset(new DateTime(2021, 7, 24, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(2363), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = "seedone",
                            Description = "A biciklizés során a fő célunk, hogy mindenki jól érezze magát. A túra során a pihenőkön közös programokat szervezünk, hogy a csapatot jobban összekovácsoljuk.",
                            EndDate = new DateTimeOffset(new DateTime(2021, 7, 20, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(2554), new TimeSpan(0, 2, 0, 0, 0)),
                            ImageName = "tour4.jpg",
                            MaxNumberOfPeople = 12,
                            Name = "Hegyi biciklizés",
                            Price = 1800,
                            StartDate = new DateTimeOffset(new DateTime(2021, 7, 20, 18, 10, 0, 670, DateTimeKind.Unspecified).AddTicks(2548), new TimeSpan(0, 2, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tourrento.DAL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "seedone",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4c96927-0181-4426-9d20-c62aca099ac0",
                            Email = "tesztelek@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Teszt Elek",
                            NormalizedEmail = "TESZTELEK@GMAIL.COM",
                            NormalizedUserName = "TESZTELEK",
                            PasswordHash = "AQAAAAEAACcQAAAAECPX9dqiUQ3jeQBbEnO2p8JFHpZe6lx0szwlF4t3PBS82xrfVK6VoBDR2lm8iZK8pA==",
                            PhoneNumber = "06/30-152-5123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f2d9a16-1cd9-45ea-869a-4e7c10cfe6c2",
                            TwoFactorEnabled = false,
                            UserName = "tesztelek"
                        },
                        new
                        {
                            Id = "seedtwo",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ed698e4-8368-463e-a5bd-8c30750cc06a",
                            Email = "wincheszter@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Winch Eszter",
                            NormalizedEmail = "WINCHESZTER@GMAIL.COM",
                            NormalizedUserName = "WINCHESZTER",
                            PasswordHash = "AQAAAAEAACcQAAAAECaehXJu0t/4OzOKFKT3VYfsocmERzfq9kyRiHOo0RIJ5tXO8V50hPLXVi10axEeJw==",
                            PhoneNumber = "06/30-152-5123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e728a01-59f2-49ac-b55f-0fad23bf60da",
                            TwoFactorEnabled = false,
                            UserName = "wincheszter"
                        },
                        new
                        {
                            Id = "seedthree",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d867e523-7678-4d48-b70b-744684360e67",
                            Email = "kbela@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Kis Béla",
                            NormalizedEmail = "KBELA@GMAIL.COM",
                            NormalizedUserName = "KBELA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHfqmLoNpb/Ed1PBDCA6HOEBG3exwpasO5fUMrZhcLT51qMLy25jkezZrAVhmb2NBg==",
                            PhoneNumber = "06/30-152-5123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af2c4768-0c58-4c09-963e-37a5dddd1641",
                            TwoFactorEnabled = false,
                            UserName = "kbela"
                        },
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98873fe4-723f-49c8-b4a6-09b53cea8f80",
                            Email = "admin@tourrento.hu",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@TOURRENTO.HU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOiFsY/ie2QZR3g8Z6XfFPcVcPnahz2g4LTT2N4c7H7yIVToOh35sADw053mMs4dCw==",
                            PhoneNumber = "06/30-152-5123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99edf23c-f1e9-47cb-a10d-63a55dbf4afc",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourrento.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.ItemCart", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.Item", "Item")
                        .WithMany("ItemCarts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourrento.DAL.Models.User", "User")
                        .WithMany("ItemCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.ItemCategory", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.Category", "Category")
                        .WithMany("ItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourrento.DAL.Models.Item", "Item")
                        .WithMany("ItemCategories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.ParticipateTour", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.Tour", "Tour")
                        .WithMany("ParticipateTours")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourrento.DAL.Models.User", "User")
                        .WithMany("ParticipateTours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.RentedItem", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.Item", "Item")
                        .WithMany("RentedItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourrento.DAL.Models.Rent", "Rent")
                        .WithMany("RentedItems")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.RequiredCategoryTour", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.Category", "RequiredCategory")
                        .WithMany("RequiredCategoryTours")
                        .HasForeignKey("RequiredCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourrento.DAL.Models.Tour", "Tour")
                        .WithMany("RequiredCategoryTours")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredCategory");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.JoinTables.TourService", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.Service", "Service")
                        .WithMany("TourServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourrento.DAL.Models.Tour", "Tour")
                        .WithMany("TourServices")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Post", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.User", "Questioner")
                        .WithMany("Posts")
                        .HasForeignKey("QuestionerId");

                    b.HasOne("Tourrento.DAL.Models.Tour", "Tour")
                        .WithMany("Posts")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questioner");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Rent", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Tour", b =>
                {
                    b.HasOne("Tourrento.DAL.Models.User", "Creator")
                        .WithMany("CreatedTours")
                        .HasForeignKey("CreatorId");

                    b.OwnsOne("Tourrento.Shared.Owned.Location", "FinalLocation", b1 =>
                        {
                            b1.Property<int>("TourId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("int");

                            b1.HasKey("TourId");

                            b1.ToTable("Tours");

                            b1.WithOwner()
                                .HasForeignKey("TourId");

                            b1.HasData(
                                new
                                {
                                    TourId = 1,
                                    City = "Budapest",
                                    Country = "Magyarország",
                                    Street = "Zugligeti út 110",
                                    ZipCode = 1121
                                },
                                new
                                {
                                    TourId = 2,
                                    City = "Budapest",
                                    Country = "Magyarország",
                                    Street = "Szent Gellért rkp. 16",
                                    ZipCode = 1013
                                },
                                new
                                {
                                    TourId = 3,
                                    City = "Budapest",
                                    Country = "Magyarország",
                                    Street = "Glück Frigyes út",
                                    ZipCode = 1025
                                },
                                new
                                {
                                    TourId = 4,
                                    City = "Budapest",
                                    Country = "Magyarország",
                                    Street = "Mátyáshegyi út 57",
                                    ZipCode = 1037
                                });
                        });

                    b.OwnsOne("Tourrento.Shared.Owned.Location", "StartLocation", b1 =>
                        {
                            b1.Property<int>("TourId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("int");

                            b1.HasKey("TourId");

                            b1.ToTable("Tours");

                            b1.WithOwner()
                                .HasForeignKey("TourId");

                            b1.HasData(
                                new
                                {
                                    TourId = 1,
                                    City = "Budapest",
                                    Country = "Magyarország",
                                    Street = "Zugligeti út 110",
                                    ZipCode = 1121
                                },
                                new
                                {
                                    TourId = 2,
                                    City = "Budapest",
                                    Country = "Magyarország",
                                    Street = "Szent Gellért rkp. 16",
                                    ZipCode = 1013
                                },
                                new
                                {
                                    TourId = 3,
                                    City = "Budaörs",
                                    Country = "Magyarország",
                                    Street = "Mandula utca",
                                    ZipCode = 2040
                                },
                                new
                                {
                                    TourId = 4,
                                    City = "Budapest",
                                    Country = "Magyarország",
                                    Street = "Mátyáshegyi út 57",
                                    ZipCode = 1037
                                });
                        });

                    b.Navigation("Creator");

                    b.Navigation("FinalLocation")
                        .IsRequired();

                    b.Navigation("StartLocation")
                        .IsRequired();
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Category", b =>
                {
                    b.Navigation("ItemCategories");

                    b.Navigation("RequiredCategoryTours");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Item", b =>
                {
                    b.Navigation("ItemCarts");

                    b.Navigation("ItemCategories");

                    b.Navigation("RentedItems");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Rent", b =>
                {
                    b.Navigation("RentedItems");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Service", b =>
                {
                    b.Navigation("TourServices");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.Tour", b =>
                {
                    b.Navigation("ParticipateTours");

                    b.Navigation("Posts");

                    b.Navigation("RequiredCategoryTours");

                    b.Navigation("TourServices");
                });

            modelBuilder.Entity("Tourrento.DAL.Models.User", b =>
                {
                    b.Navigation("CreatedTours");

                    b.Navigation("ItemCarts");

                    b.Navigation("ParticipateTours");

                    b.Navigation("Posts");

                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
